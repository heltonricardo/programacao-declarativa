! CONJUNTOS

! LISTA
[1, 2, 3];
! INTERNAMENTE FORMADA POR: [1, 2, 3, nada/nil]

! Também é possível montá-la da seguinte forma:
1 :: 2 :: 3 :: [];

! Exemplo de lista + recursividade:
dec lst : num -> list num;
--- lst 0 <= [];
--- lst n <= n :: lst(n - 1);


! MORFLOGIA DE UMA LISTA
! [1, 2, 3, 4, 5, nil]
! cabeça (head): 1
! último (last): 5
! arranjo (init): 1, 2, 3, 4
! cauda (tail): 2, 3, 4, 5

! REFERÊNCIA DE UMA LISTA
! x :: xs (xis até xises)
! Essa referência menciona a cabeça e cauda da lista
! Exemplo: [1, 2, 3, 4, 5]
! x é [1]
! xs é [2, 3, 4, 5]

! Função para retornar a cabeça de uma lista:
dec cabeca : list num -> num;
--- cabeca [] <= error("Lista vazia!");
--- cabeca (x :: xs) <= x;

! Função para retornar a cauda de uma lista:
dec cauda : list num -> list num;
--- cauda [] <= error("Lista vazia!");
--- cauda (x :: xs) <= xs;

! Outras necessitam de recursividade:

! Função para retornar o último:
dec ultimo : list num -> num;
--- ultimo [] <= error("Lista vazia!");
--- ultimo [x] <= x;
--- ultimo (x :: xs) <= ultimo xs;

! Função para retornar o arranjo:
dec arranjo : list num -> list num;
--- arranjo [] <= error("Lista vazia!");
--- arranjo [x] <= [];
--- arranjo (x :: xs) <= x :: arranjo xs;

! Outras operações

! Obter segundo elemento da lista:
dec elem2 : list num -> num;
--- elem2 [] <= error("Lista vazia!");
--- elem2 [x] <= error("Poucos elementos!");
--- elem2 (a :: b :: bs) <= b;

! Obter tamanho da lista:
dec tamanho : list num -> num;
--- tamanho [] <= 0;
--- tamanho (x :: xs) <= 1 + tamanho xs;

! Obter penúltimo elemento da lista:
dec penultimo : list num -> num;
--- penultimo [] <= error("Lista vazia!");
--- penultimo [x] <= error("Poucos elementos!");
--- penultimo (x :: xs) <= if tamanho xs = 1
                           then x
                           else penultimo xs;

! ATENÇÃO: Recebendo um conjunto em uma função
! É possível receber uma lista de duas maneiras:
! (x :: xs) e xs
! Quando recebemos da primeira forma, temos acesso ao primeiro elemento e a
! cauda também, já da segunda forma, só temos acesso a lista como um todo!

! Operadores de conjuntos:
! elemento:: lista (adiciona o elemento ao inicio da lista)
! lista <> lista (concatena duas listas)
